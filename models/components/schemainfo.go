// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"openapi/internal/utils"
	"time"
)

// SchemaStatus - Schema lifecycle status
type SchemaStatus string

const (
	SchemaStatusPublished   SchemaStatus = "PUBLISHED"
	SchemaStatusObsolete    SchemaStatus = "OBSOLETE"
	SchemaStatusDevelopment SchemaStatus = "DEVELOPMENT"
)

func (e SchemaStatus) ToPointer() *SchemaStatus {
	return &e
}
func (e *SchemaStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLISHED":
		fallthrough
	case "OBSOLETE":
		fallthrough
	case "DEVELOPMENT":
		*e = SchemaStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemaStatus: %v", v)
	}
}

// SchemaScope -  Schema Scope - is it internal or shared. This is a system defined attribute based on partition-id passed.
type SchemaScope string

const (
	SchemaScopeInternal SchemaScope = "INTERNAL"
	SchemaScopeShared   SchemaScope = "SHARED"
)

func (e SchemaScope) ToPointer() *SchemaScope {
	return &e
}
func (e *SchemaScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INTERNAL":
		fallthrough
	case "SHARED":
		*e = SchemaScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemaScope: %v", v)
	}
}

// SchemaInfo - Represents a model to Schema Info including status, creation and schemaIdentity
type SchemaInfo struct {
	// Schema authority source and type description
	SchemaIdentity SchemaIdentity `json:"schemaIdentity"`
	// The user who created the schema. This value is taken from API caller token.
	CreatedBy *string `json:"createdBy,omitempty"`
	// The UTC date time of the entity creation
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Schema lifecycle status
	Status SchemaStatus `json:"status"`
	//  Schema Scope - is it internal or shared. This is a system defined attribute based on partition-id passed.
	Scope *SchemaScope `json:"scope,omitempty"`
	// Schema authority source and type description
	SupersededBy *SchemaIdentity `json:"supersededBy,omitempty"`
}

func (s SchemaInfo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemaInfo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SchemaInfo) GetSchemaIdentity() SchemaIdentity {
	if o == nil {
		return SchemaIdentity{}
	}
	return o.SchemaIdentity
}

func (o *SchemaInfo) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *SchemaInfo) GetDateCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.DateCreated
}

func (o *SchemaInfo) GetStatus() SchemaStatus {
	if o == nil {
		return SchemaStatus("")
	}
	return o.Status
}

func (o *SchemaInfo) GetScope() *SchemaScope {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *SchemaInfo) GetSupersededBy() *SchemaIdentity {
	if o == nil {
		return nil
	}
	return o.SupersededBy
}
