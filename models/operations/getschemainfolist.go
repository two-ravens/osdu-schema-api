// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"openapi/internal/utils"
	"openapi/models/components"
)

type GetSchemaInfoListRequest struct {
	// pass an optional string to search for a specific authority
	Authority *string `default:"*" queryParam:"style=form,explode=true,name=authority"`
	// pass an optional string to search for a specific source
	Source *string `default:"*" queryParam:"style=form,explode=true,name=source"`
	// pass an optional string to search for a specific entityType
	EntityType *string `default:"*" queryParam:"style=form,explode=true,name=entityType"`
	// pass an optional string to search for a specific schemaVersionMajor
	SchemaVersionMajor *string `default:"*" queryParam:"style=form,explode=true,name=schemaVersionMajor"`
	// pass an optional string to search for a specific schemaVersionMinor
	SchemaVersionMinor *string `default:"*" queryParam:"style=form,explode=true,name=schemaVersionMinor"`
	// pass an optional string to search for a specific schemaVersionPatch
	SchemaVersionPatch *string `default:"*" queryParam:"style=form,explode=true,name=schemaVersionPatch"`
	// The schema status specification
	Status *string `default:"PUBLISHED" queryParam:"style=form,explode=true,name=status"`
	// The scope or schema visibility specification
	Scope *string `default:"INTERNAL" queryParam:"style=form,explode=true,name=scope"`
	// if True, only return the latest version
	LatestVersion *string `default:"False" queryParam:"style=form,explode=true,name=latestVersion"`
	// maximum number of schema records to return
	Limit *string `queryParam:"style=form,explode=true,name=limit"`
	// number of records to skip for pagination
	Offset *string `queryParam:"style=form,explode=true,name=offset"`
}

func (g GetSchemaInfoListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSchemaInfoListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSchemaInfoListRequest) GetAuthority() *string {
	if o == nil {
		return nil
	}
	return o.Authority
}

func (o *GetSchemaInfoListRequest) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetSchemaInfoListRequest) GetEntityType() *string {
	if o == nil {
		return nil
	}
	return o.EntityType
}

func (o *GetSchemaInfoListRequest) GetSchemaVersionMajor() *string {
	if o == nil {
		return nil
	}
	return o.SchemaVersionMajor
}

func (o *GetSchemaInfoListRequest) GetSchemaVersionMinor() *string {
	if o == nil {
		return nil
	}
	return o.SchemaVersionMinor
}

func (o *GetSchemaInfoListRequest) GetSchemaVersionPatch() *string {
	if o == nil {
		return nil
	}
	return o.SchemaVersionPatch
}

func (o *GetSchemaInfoListRequest) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetSchemaInfoListRequest) GetScope() *string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *GetSchemaInfoListRequest) GetLatestVersion() *string {
	if o == nil {
		return nil
	}
	return o.LatestVersion
}

func (o *GetSchemaInfoListRequest) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetSchemaInfoListRequest) GetOffset() *string {
	if o == nil {
		return nil
	}
	return o.Offset
}

type GetSchemaInfoListResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Body     []byte
}

func (o *GetSchemaInfoListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSchemaInfoListResponse) GetBody() []byte {
	if o == nil {
		return nil
	}
	return o.Body
}
